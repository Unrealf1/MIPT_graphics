#version 430

// this shader computes sum tree of one block 
// and stores sum og the whole block separately

const uint block_size = 256;
const uint load_offset = block_size / 2;

layout( local_size_x = 128 ) in;

layout( push_constant ) uniform params {
  uint array_size;
} PushConstant;

layout(std430, binding = 1) buffer out_buf_
{
    float out_buf[];
};

layout(std430, binding = 2) buffer sums_buf_
{
    float sums_buf[];
};

void main() 
{
    uint n = block_size;
    uint group_id = gl_WorkGroupID.x;
    uint tid = gl_LocalInvocationID.x;
    
    // loading whole array into shared memory
    uint block_offset = block_size * group_id;

    float correction = sums_buf[group_id];
    out_buf[tid + block_offset] += correction;
    out_buf[tid + load_offset + block_offset] += correction;
}